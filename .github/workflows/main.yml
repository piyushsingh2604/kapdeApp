name: Build & upload to Firebase App Distribution

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering from GitHub Actions tab

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java 11
      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"

      # Step 3: Decode google-services.json from secrets
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json

      # Step 4: Decode Firebase options for Flutter
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{ secrets.FIREBASE_OPTION }}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart

      # Step 5: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"  # Use the stable channel, or specify another version if needed

      # Step 6: Install dependencies
      - name: Get dependencies
        run: flutter pub get

      # Step 7: Build APK
      - name: Build APK
        run: flutter build apk

      # Step 8: Upload APK artifact for later use (e.g., download)
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

      # Step 9: Upload APK to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.APPID }}  # Firebase app ID
          token: ${{ secrets.TOKEN }}  # Firebase token
          groups: pre-tester  # Modify with your tester group name
          file: build/app/outputs/apk/release/app-release.apk
